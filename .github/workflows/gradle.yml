name: Spring Boot & Gradle & Docker & EC2 CI/CD

on:
  push:
    branches: [ "master", "feature/docker" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest #ubuntu-20.04

    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      ## 1) git ignore에 등록된 application.properties 파일 생성해주기
      - name: make application.properties
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES }}" > ./application.properties
        shell: bash

      ## 2) 스프링 프로젝트 jar 파일 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build --no-daemon

      ## 3) Docker Hub에 이미지 push 하기
      - name: Docker build
        run: |
          docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
          docker build -t ${{ secrets.USERNAME }}/ecommerce-market-place . 
          docker push ${{ secrets.USERNAME }}/ecommerce-market-place

      ## 4) Docker Hub에 Push한 이미지를 리눅스 서버에 받아와서 run
      - name: Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.AWS_TEST_X_HOST }}
          username: ${{ secrets.AWS_TEST_X_USERNAME }}
          key: ${{ secrets.AWS_TEST_X_KEY }}
          port: ${{ secrets.AWS_TEST_X_PORT }}          
          script: |
            docker pull ${{ secrets.USERNAME }}/ecommerce-market-place
            docker stop $(docker ps -a -q)
            docker run -d --log-driver=syslog -p 8080:8080 ${{ secrets.USERNAME }}/ecommerce-market-place
            docker rm $(docker ps --filter 'status=exited' -a -q)
            docker image prune -a -f
